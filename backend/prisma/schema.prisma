// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                       @id @default(autoincrement()) @db.UnsignedInt
  displayedId              String                    @unique @default(dbgenerated("(UUID())")) @map("displayed_id")
  userCredential           UserCredential?
  userThirdPartyCredential UserThirdPartyCredential?
  userContactDetail        UserContactDetail?
  userProfile              UserProfile?
  userRoles                UsersRoles[]
  refreshTokenRotations    RefreshTokenRotation[]
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")

  @@map("users")
}

model UserCredential {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id") @db.UnsignedInt
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_credentials")
}

model UserThirdPartyCredential {
  id        Int                    @id @default(autoincrement()) @db.UnsignedInt
  user      User                   @relation(fields: [userId], references: [id])
  userId    Int                    @unique @map("user_id") @db.UnsignedInt
  sub       String
  provider  UserCredentialProvider
  createdAt DateTime               @default(now()) @map("created_at")
  updatedAt DateTime               @updatedAt @map("updated_at")

  @@unique([sub, provider])
  @@map("user_third_party_credentials")
}

enum UserCredentialProvider {
  GOOGLE
}

model UserContactDetail {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id") @db.UnsignedInt
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_contact_details")
}

model UserProfile {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id") @db.UnsignedInt
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_profiles")
}

model Role {
  id          Int          @id @default(autoincrement()) @db.UnsignedInt
  displayedId String       @unique @default(dbgenerated("(UUID())")) @map("displayed_id")
  name        RoleName     @unique @default(USER)
  users       UsersRoles[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("roles")
}

enum RoleName {
  USER
  ADMIN
}

// MEMO: 現時点での想定は「ユーザー1人につき1つのロール割当」
model UsersRoles {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id") @db.UnsignedInt
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int      @map("role_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users_roles")
}

model RefreshTokenRotation {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  user            User     @relation(fields: [userId], references: [id])
  userId          Int      @map("user_id") @db.UnsignedInt
  refreshToken    String   @map("refresh_token") @db.Text
  refreshTokenExp Int      @map("refresh_token_exp") @db.UnsignedInt
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("refresh_token_rotations")
}
