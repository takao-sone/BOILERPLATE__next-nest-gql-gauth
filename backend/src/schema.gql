# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GoogleRegisterInput {
  """フロントエンドのリクエストで発行されたGoogleのcredential（JWT）"""
  credential: String!
}

type GoogleTokenAuth {
  """アクセストークン"""
  accessToken: String!
}

type GoogleUser {
  """DBへのデータ作成時間"""
  createdAt: DateTime!

  """クライアントアプリケーション側へ表示するID"""
  displayedId: String!

  """DBへのデータ更新時間"""
  updatedAt: DateTime!

  """ユーザー連絡先情報"""
  userContactDetail: UserContactDetail!

  """ユーザープロフィール情報"""
  userProfile: UserProfile!

  """ユーザー権限"""
  userRole: Role!

  """ユーザー認証情報"""
  userThirdPartyCredential: UserThirdPartyCredential!
}

type GoogleUserConnection {
  """edgeオブジェクト配列"""
  edges: [GoogleUserEdge!]

  """ページネーションに関する情報"""
  pageInfo: PageInfo!

  """指定した条件で取得できる最大データ数"""
  totalCount: Int!
}

type GoogleUserEdge {
  """現在のnodeのカーソル"""
  cursor: String!

  """nodeオブジェクト"""
  node: GoogleUser!
}

type Mutation {
  "\n      権限: ALL \n\n      Google Identityを使用した新規ユーザー登録用オペレーション\n    "
  googleRegisterUser(data: GoogleRegisterInput!): GoogleTokenAuth!

  "\n      権限: ALL \n\n      ログイン用オペレーション\n    "
  logIn(data: TokenLogInInput!): TokenAuth!

  "\n      権限: ALL \n\n      ログアウト用オペレーション\n    "
  logOut(data: TokenLogOutInput!): String

  "\n      権限: ALL \n\n      トークン更新用オペレーション\n    "
  refreshTokens(data: RefreshTokensInput!): TokenAuth!
}

type PageInfo {
  """最後に取得したデータのカーソル"""
  endCursor: String

  """次のページの可否"""
  hasNextPage: Boolean

  """前のページの可否"""
  hasPreviousPage: Boolean

  """最初に取得したデータのカーソル"""
  startCursor: String
}

input PaginationInput {
  """起点となるカーソル(カーソル以降の値取得時)"""
  after: String

  """起点となるカーソル(カーソル以前の値取得時)"""
  before: String

  """値の取得数(カーソル以降の値取得時)"""
  first: Int

  """値の取得数(カーソル以前の値取得時)"""
  last: Int

  """カーソルを含めた取得する値のスキップ数"""
  skip: Int
}

type Query {
  "\n      権限: Logged-In \n\n      現在ログインしているユーザーの情報 \n\n    "
  authenticatedUser: SessionUser!

  "\n      権限: ADMIN \n\n      ページネーションによりロールを取得するオペレーション \n\n    "
  roleConnection(pagination: PaginationInput = {first: 1, skip: 1}, sort: RoleSortInput = {direction: ASC, field: ID}): RoleConnection!

  "\n      権限: ALL \n\n      テスト\n    "
  testLoggedInGuard: String!

  "\n      権限: ALL \n\n      テスト\n    "
  testRoleGuard: String!

  "\n      権限: ADMIN \n\n      ユーザーのdisplayedIdによってユーザーを取得するオペレーション \n\n    "
  user(
    """ユーザーのdisplayedId"""
    displayedId: String!
  ): GoogleUser!

  "\n      権限: ADMIN \n\n      ページネーションによりユーザーを取得するオペレーション \n\n    "
  userConnection(pagination: PaginationInput = {first: 1, skip: 1}, sort: UserSortInput = {direction: ASC, field: ID}): GoogleUserConnection!
}

input RefreshTokensInput {
  """リフレッシュトークン"""
  refreshToken: String!
}

type Role {
  """DBへのデータ作成時間"""
  createdAt: DateTime!

  """クライアントアプリケーション側へ表示するID"""
  displayedId: String!

  """ロールの名前"""
  name: String!

  """DBへのデータ更新時間"""
  updatedAt: DateTime!
}

type RoleConnection {
  """edgeオブジェクト配列"""
  edges: [RoleEdge!]

  """ページネーションに関する情報"""
  pageInfo: PageInfo!

  """指定した条件で取得できる最大データ数"""
  totalCount: Int!
}

type RoleEdge {
  """現在のnodeのカーソル"""
  cursor: String!

  """nodeオブジェクト"""
  node: Role!
}

"""Properties by which role connections can be ordered."""
enum RoleSortField {
  ID
}

input RoleSortInput {
  """ソートする方向"""
  direction: SortDirection = ASC

  """ロール取得する際にソート対象にしたいフィールド"""
  field: RoleSortField = ID
}

type SessionUser {
  """アクセストークン"""
  displayedId: String!

  """ユーザー連絡先情報"""
  userContactDetail: SessionUserContactDetail!

  """ユーザープロフィール"""
  userProfile: SessionUserProfile!

  """ユーザー権限"""
  userRole: SessionUserRole!
}

type SessionUserContactDetail {
  """メールアドレス"""
  email: String!
}

type SessionUserProfile {
  """ユーザー名"""
  name: String!
}

type SessionUserRole {
  """クライアントアプリケーション側へ表示するID"""
  displayedId: String!

  """ロールの名前"""
  name: String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum SortDirection {
  ASC
  DESC
}

type TokenAuth {
  """アクセストークン"""
  accessToken: String!

  """リフレッシュトークン"""
  refreshToken: String!
}

input TokenLogInInput {
  """登録したメールアドレス"""
  email: String!

  """登録したパスワード"""
  password: String!
}

input TokenLogOutInput {
  """リフレッシュトークン"""
  refreshToken: String!
}

type UserContactDetail {
  """DBへのデータ作成時間"""
  createdAt: DateTime!

  """メールアドレス"""
  email: String!

  """DBへのデータ更新時間"""
  updatedAt: DateTime!
}

type UserProfile {
  """DBへのデータ作成時間"""
  createdAt: DateTime!

  """ユーザー名"""
  name: String!

  """DBへのデータ更新時間"""
  updatedAt: DateTime!
}

"""Properties by which user connections can be ordered."""
enum UserSortField {
  CREATED_AT
  ID
}

input UserSortInput {
  """ソートする方向"""
  direction: SortDirection = ASC

  """ユーザー取得する際にソート対象にしたいフィールド"""
  field: UserSortField = ID
}

type UserThirdPartyCredential {
  """DBへのデータ作成時間"""
  createdAt: DateTime!

  """IDプロバイダー名"""
  provider: String!

  """DBへのデータ更新時間"""
  updatedAt: DateTime!
}